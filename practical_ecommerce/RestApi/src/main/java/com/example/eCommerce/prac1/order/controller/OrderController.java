package com.example.eCommerce.prac1.order.controller;

import com.example.eCommerce.prac1.UrlConstant;
import com.example.eCommerce.prac1.utility.controller.BaseController;
import com.example.eCommerce.prac1.utility.genericResponse.GenericResponseModel;
import com.example.eCommerce.prac1.utility.log.AppLogger;
import com.example.eCommerce.prac1.order.model.OrderDTO;
import com.example.eCommerce.prac1.order.model.OrderHistoryReqDTO;
import com.example.eCommerce.prac1.order.service.OrderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;

@RestController
@RequestMapping(path = UrlConstant.MainUrl + "order")
public class OrderController extends BaseController<OrderDTO> {
    private OrderService service;

    public OrderController(OrderService service) {
        super(service);
        this.service = service;
    }

    /**
     * here orderNumber is autogenerated with epochSecond..
     *
     * @param entityDTO OrderDTO
     * @param result    BindingResult
     * @return saved data in case of successful operation
     */
    @Override
    public ResponseEntity<GenericResponseModel> save(@Valid @RequestBody OrderDTO entityDTO, BindingResult result) {
        Instant instant = LocalDateTime.now().toInstant(ZoneOffset.UTC);
        entityDTO.setOrderNumber(String.valueOf(instant.getEpochSecond()));
        return super.save(entityDTO, result);
    }

    /**
     * here made an assumption that I get loggedInUser in request, otherwise we can derive it with Authentication..
     *
     * @param reqDTO OrderHistoryReqDTO
     * @return History of Order placed by loggedInUser
     */
    @PostMapping(path = "/getFilteredData")
    public ResponseEntity<GenericResponseModel> getFilteredData(@RequestBody OrderHistoryReqDTO reqDTO) {
        GenericResponseModel responseModel = new GenericResponseModel();
        try {
            List<OrderDTO> resultList = service.getFilteredOrder(reqDTO);
            responseModel = getResponseModel(HttpStatus.OK.value(), null, null, resultList, "Success");
            return ResponseEntity.status(HttpStatus.OK).body(responseModel);
        } catch (Exception e) {
            AppLogger.logger.error(getModuleName() + " [getFilteredData()] " + e.getMessage(), e);
            responseModel = super.getResponseModel(HttpStatus.INTERNAL_SERVER_ERROR.value(), null
                    , null, null, "Internal server error.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(responseModel);
        }
    }

    @Override
    public String getModuleName() {
        return "[ Order Controller ]";
    }
}
